/* This program (BCP.c) is forked by CID to receive bcast messages. It also
 * forks a child upon receipt of a bcast message.
 * Author: Feijian Sun
 * April 20, 1996
 */

#include        "bcr.h"

int main(argc, argv)
int     argc;
char    *argv[];
{
  char                    bcid[BCKEY_LEN];
  cid_host_port		  l_cid;
  int                     sockfd, xpc_pid, lcliaddr;
  struct sockaddr_in      serv_addr, cli_addr;
  cid_recieve_bc          in_bc;
  char                    buffer1[32];  /* hostid */
  char                    buffer2[16];  /* port */
  char                    buffer3[32];  /* bckey */
  char                    buffer4[128];  /* appid */
  char                    buffer5[32];  /* name */
  char                    buffer6[16];  /* priority */
  char                    buffer7[32];  /* host */
  char                    buffer8[16];  /* port_t */
  char                    buffer9[16];  /* opflag */

  strcpy(bcid, argv[1]);

  l_cid.hostid = ((cid_host_port *)argv[2])->hostid;
  l_cid.port   = ((cid_host_port *)argv[2])->port;

  sprintf(BCR_PATH,"%s/bin",getenv("SNG_PATH")); 
  sprintf(XPC_PATH, "%s/xpc", BCR_PATH);
  /*
   * Open a UDP socket (an Internet datagram socket).
   */
  if ( (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
    exit(1);
  /*
   * Bind any local address for us.
   */
  bzero((char *) &serv_addr, sizeof(serv_addr));    /* zero out */
  serv_addr.sin_family      = AF_INET;
  serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
  serv_addr.sin_port        = htons(SERV_UDP_PORT);

  if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
  {
    close(sockfd);
    exit(1);
  }

  lcliaddr = sizeof(cli_addr);
  while (TRUE)
  {
    if (recvfrom(sockfd, (char *) &in_bc, sizeof(cid_recieve_bc), 0, (struct sockaddr *) &cli_addr, &lcliaddr) < 0)
    {
      close(sockfd);
      exit(1);
    }


/* in_bc.opflag = ntohs(in_bc.opflag); */


strcpy(l_cid.bckey, in_bc.bckey);
strcpy(l_cid.appid, in_bc.appid);
strcpy(l_cid.name, in_bc.name);
l_cid.priority = in_bc.priority;
l_cid.host = in_bc.host;
l_cid.port_t = in_bc.port;
l_cid.opflag = in_bc.opflag;


sprintf(buffer1, "%u\0", l_cid.hostid);
sprintf(buffer2, "%u\0", l_cid.port);
sprintf(buffer3, "%s\0", l_cid.bckey);
sprintf(buffer4, "%s\0", l_cid.appid);
sprintf(buffer5, "%s\0", l_cid.name);
sprintf(buffer6, "%d\0", l_cid.priority);
sprintf(buffer7, "%u\0", l_cid.host);
sprintf(buffer8, "%u\0", l_cid.port_t);
sprintf(buffer9, "%u\0", l_cid.opflag);

    if (!strcmp(in_bc.bckey, bcid) && (in_bc.host != l_cid.hostid) &&
                                     (in_bc.port != l_cid.port))
{

      if ((xpc_pid = fork()) == 0 )
      {
        execl(XPC_PATH, XPC_PATH, buffer1, buffer2, buffer3, buffer4, buffer5, buffer6, 
              buffer7, buffer8, buffer9, (char *)0) ;
                                   /* exec failed, should never happen */

  
        exit(-1);
      }
}


  }

  close(sockfd);
  exit(0);
}

